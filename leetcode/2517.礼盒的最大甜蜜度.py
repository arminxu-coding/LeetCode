"""
给你一个正整数数组 price ，其中 price[i] 表示第 i 类糖果的价格，另给你一个正整数 k 。
商店组合 k 类 不同 糖果打包成礼盒出售。礼盒的 甜蜜度 是礼盒中任意两种糖果 价格 绝对差的最小值。
返回礼盒的 最大 甜蜜度。

示例 1：
    输入：price = [13,5,1,8,21,2], k = 3
    输出：8
    解释：选出价格分别为 [13,5,21] 的三类糖果。
    礼盒的甜蜜度为 min(|13 - 5|, |13 - 21|, |5 - 21|) = min(8, 8, 16) = 8 。
    可以证明能够取得的最大甜蜜度就是 8 。
示例 2：
    输入：price = [1,3,1], k = 2
    输出：2
    解释：选出价格分别为 [1,3] 的两类糖果。
    礼盒的甜蜜度为 min(|1 - 3|) = min(2) = 2 。
    可以证明能够取得的最大甜蜜度就是 2 。
示例 3：
    输入：price = [7,7,7,7], k = 2
    输出：0
    解释：从现有的糖果中任选两类糖果，甜蜜度都会是 0 。
https://leetcode.cn/problems/maximum-tastiness-of-candy-basket/description/
"""


class Solution:

    def generate_k_subsequences(self, nums, k):
        # 边界条件处理
        if k <= 0 or k > len(nums):
            return []
        result = []

        def backtrack(start, current):
            # 如果当前子序列长度达到k，添加到结果集
            if len(current) == k:
                result.append(current.copy())
                return
            # 从start开始遍历，确保不重复且保持顺序
            for i in range(start, len(nums)):
                # 选择当前元素
                current.append(nums[i])
                # 递归处理下一个元素，注意起始索引为i+1
                backtrack(i + 1, current)
                # 回溯，移除最后一个元素
                current.pop()

        # 从索引0开始，初始子序列为空
        backtrack(0, [])
        return result

    def calculate_list_diff_min_value(self, nums: list[int]):
        res = 9999999999
        for i in range(len(nums)):
            for j in range(i + 1, len(nums)):
                res = min(res, abs(nums[j] - nums[i]))
        return res

    def maximumTastiness(self, price: list[int], k: int) -> int:
        res = 0
        length = len(price)

        # # 方法一：暴力
        # # 1. 求 price[] 所有 k 个数据的子序列
        # results: list[list[int]] = self.generate_k_subsequences(price, k)
        # # 2. 求每一个子序列的 任意两个值相差的最小值，并求最大值
        # for nums in results:
        #     res = max(res, self.calculate_list_diff_min_value(nums))

        # 方法二：二分法，说实话  真不理解，为什么是这样子的题解
        def check(num: int) -> bool:
            cnt = 1
            prev = price[0]
            for i in range(1, length):
                if price[i] - prev >= num:
                    cnt += 1
                    prev = price[i]
            return cnt >= k

        price.sort()
        left, right = 0, price[length - 1] - price[0]
        while left <= right:
            mid = left + (right - left) // 2  # 计算中间值，假设中间值就是 最大甜蜜度
            if check(mid):  # 检查一下当前 甜蜜度mid 是否能在当前 price 中的 k长子序列 中找到
                res = mid
                left = mid + 1
            else:
                right = mid - 1

        return res


if __name__ == '__main__':
    solution = Solution()
    print(solution.maximumTastiness(price=[13, 5, 1, 8, 21, 2], k=3))
    print(solution.maximumTastiness(price=[1, 3, 1], k=2))
    print(solution.maximumTastiness(price=[7, 7, 7, 7], k=2))
    print(solution.maximumTastiness(
        price=[63807, 23997, 967, 71957, 55944, 46460, 4003, 61615, 79689, 20580, 86773, 52964, 84323, 78255, 42425,
               20990, 74117, 1685, 80916, 99369, 90239, 55759, 95899, 64117, 50449, 43677, 63001, 14245, 84407, 92198,
               61438, 66791, 16945, 16469, 35322, 46244, 78847, 6529, 14928, 38392, 35017, 62313, 91433, 34791, 29599,
               69491, 35111, 8683, 18310, 83858, 79744, 40536, 8017, 72216, 1433, 59740, 71447, 11578, 89340, 73785,
               12096, 55734, 89484, 59775, 72652, 49738, 48003, 46099, 66160, 37044, 24370, 76191, 82412, 54384, 39361,
               70991, 74580, 80601, 48837, 45192, 58200, 74354, 52129, 79161, 67960, 79029, 45344, 1743, 83581, 81551,
               75313, 34591, 54994, 66417, 66136, 8816, 63372, 87005, 96342, 36702, 63361, 21218, 38306, 16021, 12208,
               68729, 50340, 81101, 34493, 9144, 87952, 20173, 68344, 95443, 66527, 82964, 40678, 80873, 75745, 93632,
               85686, 37188, 19281, 16293, 87006, 20109, 80762, 25008, 90378, 56112, 68296, 85246, 2754, 80103, 38257,
               15462, 44286, 1371, 54405, 58663, 95740, 70495, 71785, 14014, 24479, 13089, 21111, 14117, 17614, 85069,
               36869, 1423, 12600, 25637, 55283, 83521, 30551, 53475, 73549, 56345, 96010, 72967, 68450, 38523, 13478,
               81010, 93925, 65871, 86104, 71457, 59316, 82359, 39013, 43075, 30912, 53863, 43681, 88265, 19330, 94551,
               67706, 27240, 11429, 81906, 38432, 95492, 94045, 68492, 54669, 56556, 19844, 84476, 87010, 78859, 84275,
               86491, 86094, 72718, 52946, 32425, 23557, 5294, 2645, 90554, 2737, 5017, 2232, 55344, 94993, 695, 13084,
               89111, 47596, 48839, 46648, 63920, 92772, 56389, 2805, 56165, 40903, 94450, 98431, 37057, 31077, 31524,
               37477, 58887, 41430, 9242, 74784, 40940, 17349, 59142, 59349, 33241, 78930, 53913, 89137, 1023, 14749,
               44562, 83778, 75536, 56783, 40996, 48490, 97374, 72386, 34941, 90301, 57887, 72656, 34285, 43310, 3246,
               70324, 28685, 37815, 50569, 8424, 66500, 89407, 1405, 39260, 87454, 42338, 59661, 44744, 77038, 6143,
               52387, 29280, 97320, 960, 9999, 26842, 79514, 56488, 63210, 8530, 48582, 5638, 73882, 4072, 32888, 17336,
               3057, 8110, 93054, 93147, 28358, 92266, 12422, 73244, 42773, 28241, 56816, 4987, 54099, 35656, 89616,
               78482, 872, 66998, 58279, 41088, 51187, 27620, 52726, 71425, 68014, 61392, 65909, 49605, 85072, 83911,
               30961, 45775, 95383, 62477, 46058, 32706, 71793, 62057, 62426, 62017, 23343, 47926, 34298, 21420, 5537,
               65973, 25360, 19649, 60631, 21238, 10385, 55583, 22244, 84418, 63468, 11708, 63848, 41819, 33283, 93277,
               13080, 93570, 58472, 86890, 61717, 94871, 5078, 46240, 26307, 24600, 35961, 27085, 11650, 30320, 12768,
               52510, 29796, 15878, 44446, 22066, 57790, 32807, 26096, 77404, 13600, 67636, 24385, 91562, 73468, 37843,
               29848, 84670, 12010, 44264, 88655, 15763, 37065, 18458, 11924, 52520, 7182, 2241, 58563, 82033, 96543,
               68494, 89638, 52903, 34891, 5790, 58759, 48049, 62815, 83409, 48045, 87180, 95967, 52747, 85386, 102,
               48340, 76828, 15788, 9943, 11092, 61129, 88518, 96147, 42505, 12094, 61101, 70256, 64083, 79703, 22043,
               28236, 36278, 15836, 28436, 82976, 77983, 41879, 21545],
        k=414)
    )
